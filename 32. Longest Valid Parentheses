https://leetcode.com/problems/longest-valid-parentheses/description/
Algorithm 1: Using Stack
  - create one stack and initialize with -1;
  - iterate the input string
      - push index if you encounter '('
      - if you encount')'
          -remove the top element
          -and check if if stack is empty
              -if yes then push the index and come out from the block
          - else i-peek index will give you the length

public int longestValidParentheses(String s) {
        Stack<Integer> st=new Stack<>();
        st.push(-1);
        int res=0;
        
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                st.push(i);

            }else{
                st.pop();
                if(st.empty()){
                    st.push(i);
                }else{
                    res=Math.max(res,i-st.peek());
                }

            }
        }
        return res;
    }


Algorith 2 :
    - two pass solution

public int twoPassSolution(String s) {
        int left=0;int right=0;
        int maxLength=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                left++;
            }else{
                right++;
            }
            if(left==right){
                maxLength=Math.max(maxLength,2*right);

            }else if(right>left){
                left=0;
                right=0;
            }
        }
        left=0;
        right=0;

        for(int i=s.length()-1;i>=0;i--){
              if(s.charAt(i)==')'){
                left++;
            }else{
                right++;
            }
            if(left==right){
                maxLength=Math.max(maxLength,2*left);

            }else if(right>left){
                left=0;
                right=0;
            }
        }

        return maxLength;
    }
  
