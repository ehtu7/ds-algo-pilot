https://leetcode.com/problems/search-a-2d-matrix/description/

Intution:
  The problem statement says that each element of each row is sorted, and above that it is sorted in indexes also. 
  so if array is sorted and search is something we need to perform then Binary serach is the potential tool we can apply.

Algorithm :
  - apply binary serach on 2d matrix to find the right 1D array
  - and again apply binary serach on 1 D array 

Time Complexity :
  - binary serach time complexity is O(logn) for 2d matrix and O(logn) for 1 D aaray.
  so overall its O(log(n+m)


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int l=0;
        int r=matrix.length-1;
        int n=matrix[0].length-1;
        while(l<=r)    {
            int mid=l+(r-l)/2;
            if(matrix[mid][0]>target){
                
                r=mid-1;
            }else if(matrix[mid][0]<=target && matrix[mid][n]>=target){
                return helpWithBinarySearch(matrix[mid],target);
            }else{
                l=mid+1;
                
            }
        }
        return false;
    }

    public boolean helpWithBinarySearch(int[] nums,int target){
        int l=0;
        int r=nums.length-1;
        while(l<=r){
            int mid = l + (r - l) / 2;
            if(nums[mid]==target){
                return true;
            }else if(nums[mid]<target){
                l=mid+1;
            }else{
                r=mid-1;
            }
        }
        return false;
    }
}
