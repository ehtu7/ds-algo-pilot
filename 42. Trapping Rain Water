https://leetcode.com/problems/trapping-rain-water/description/

Algorithm:
  - create maxl array which will hold maximum value of left sub array from ith element in height array
  - create maxr array which will hold maximum value of right sub array from ith element in height array
  - now itterate the maxl/maxr aaray
  - take min of ith of maxl and maxr 
  - take difference from ith element of height array
  - and calculate volume of water

public int trap(int[] height) {
        int [] maxl=new int[height.length];
        int [] maxr=new int[height.length];
        maxl[0]=height[0];
        for(int i=1;i<height.length;i++){
            maxl[i]=Math.max(maxl[i-1],height[i]);
        }
        maxr[height.length-1]=height[height.length-1];
        for(int i=height.length-2;i>=0;i--){
            maxr[i]=Math.max(maxr[i+1],height[i]);
        }
        //for(int i=0;i<)

        int volume=0;

        for(int i=0;i<height.length;i++){
            volume+=(Math.min(maxl[i],maxr[i])-height[i])*1;

        }
        return volume;
    }
