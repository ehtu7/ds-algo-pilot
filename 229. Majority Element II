https://leetcode.com/problems/majority-element-ii/description/

Intution:
  - here you can calculate K and convert the problem in slidding window.


Method 1: Using Sorting

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        Arrays.sort(nums);
        List<Integer> res=new ArrayList<>();
        int k=nums.length/3; //2, 3, 3
        System.out.println("k : "+k);
        int j=0;int i=0;
        int count=0;
        while(j<nums.length){
            if(nums[j]==nums[i]){
                count++;
                j++;
            }else if(nums[j]!=nums[i]){
                if(count>k){
                    res.add(nums[i]);
                }
                i=j;
                count=0;
            }
            
        }
        if(count>k){
            res.add(nums[i]);
        }
        return res;
    }
}

Method 2: Using Map

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        Map<Integer,Integer> map = new HashMap<>();

        int k=nums.length/3;

        for( int i:nums){
            
            if(map.containsKey(i)){
                map.put(i,map.get(i)+1);
            }else{
                map.put(i,1);
            }

        }
        for(int i:nums){
            if(map.containsKey(i) && map.get(i)<k+1){
                map.remove(i);
            }
            
        }
        return map.keySet().stream().collect(Collectors.toList());
    }
}
