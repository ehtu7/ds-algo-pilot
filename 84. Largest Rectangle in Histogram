https://leetcode.com/problems/largest-rectangle-in-histogram/description/

Algorithm :
  -use stack to find the NSL and store it in left array
  -use stack to find the NSR and store it in right array
  -difference of each index * heights[i] will return area, then find the maximum.

class Solution {
    public int largestRectangleArea(int[] heights) {
        if (heights.length == 1) {
            return heights[0];
        }

        int[] left = getNSL(heights); // Nearest Smaller to the Left
        int[] right = getNSR(heights); // Nearest Smaller to the Right
        int area = 0;

        // Calculate the area for each bar
        for (int i = 0; i < heights.length; i++) {
            area = Math.max(area, (right[i] - left[i] - 1) * heights[i]);
        }

        return area;
    }

    private int[] getNSL(int[] heights) {
        Stack<int[]> st = new Stack<>();
        int[] nums = new int[heights.length];

        for (int i = 0; i < heights.length; i++) {
            while (!st.empty() && st.peek()[1] >= heights[i]) {
                st.pop();
            }
            nums[i] = st.empty() ? -1 : st.peek()[0];
            st.push(new int[]{i, heights[i]});
        }

        return nums;
    }

    private int[] getNSR(int[] heights) {
        Stack<int[]> st = new Stack<>();
        int[] nums = new int[heights.length];
        int dummyIndex = heights.length; // Use the array's length as the dummy index for no smaller bar to the right.

        for (int i = heights.length - 1; i >= 0; i--) {
            while (!st.empty() && st.peek()[1] >= heights[i]) {
                st.pop();
            }
            nums[i] = st.empty() ? dummyIndex : st.peek()[0];
            st.push(new int[]{i, heights[i]});
        }

        return nums;
    }
}
