problem : https://leetcode.com/problems/sort-colors/description/
## Solution 1: 
      Time Complexity : O(N) 
      Space Complexity : O(1)
public void sortColors(int[] nums) {
        int i=0;
        int j=0;
        int k=0;
        for(int num:nums){
            if(num==0){
                i++;
            }else if(num==1){
                j++;

            }else if(num==2){
                k++;
            }
        }
        
        for(int n=0;n<nums.length;n++){
            if(i>0){
                nums[n]=0;
                i--;
            }else if(j>0){
                nums[n]=1;
                j--;
            }else if(k>0){
                nums[n]=2;
                k--;
            }
        }
        
    }


## Solution 2:

class Solution {
    public void sortColors(int[] nums) {
        int start=0;
        int end=nums.length-1;
        int mid=0;

        while(mid<=end){
            switch(nums[mid]){
            case 2:
                swap(nums,mid,end);
                end--;
                break;
            case 0:
                swap(nums,mid,start);
                start++;
                mid++;
                break;
            case 1:
                mid++;
                break;
            }
        }
        
    }
    public void swap(int [] nums, int i,int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}
